from pathlib import Path

import mne
import numpy as np

from intermodulation.analysis_spec import make_parser, pick_points

if __name__ == "__main__":
    parser = make_parser(group_level=True, plots=True)
    parser.description = (
        "Pipeline script to compute source space signal-to-noise data "
        "for individual subjects in the frequency spectrum."
    )
    parser.add_argument(
        "--results-dir",
        type=Path,
        default="/srv/beegfs/scratch/users/g/gercek/syntax_im/results",
        help="Root directory for group mean data. Must have a folder `sub-all` generated by "
        "`06_group_means_source` with associated source time course files.",
    )
    parser.add_argument(
        "--fs-sub-dir",
        type=Path,
        default="/srv/beegfs/scratch/users/g/gercek/syntax_im/syntax_dataset/derivatives/freesurfer",
        help="Path to the freesurfer subjects directory in which recon-all outputs are stored for "
        "the `fsaverage` subject.",
    )
    parser.add_argument(
        "--meg-true-samprate",
        type=float,
        default=1000.49,
        help="The MEGIN Elektra at FCBG is known to sample slightly faster than advertised, which "
        "affects the true frequencies observed in the FFT and will lead to a slightly lower freq "
        "than in reality. This allows for us to correct. Specify w.r.t. a true 1000 Hz rate.",
    )
    args = parser.parse_args()

    # STORAGE LOCATIONS
    stc_root = args.results_dir / "sub-all"
    savepath = args.plotpath / "sub-all"

    savepath.mkdir(parents=True, exist_ok=True)
    (savepath / "allcond").mkdir(parents=True, exist_ok=True)
    (savepath / "percond").mkdir(parents=True, exist_ok=True)

    samprate_correction = (2 * 1000) / (args.meg_true_samprate * 2)

    tag_f = (6, 7.05882353)

    tasks = ("ONEWORD", "TWOWORD")
    ow_tags = ("F1", "F2")
    tw_tags = ("F1LEFT", "F1RIGHT")
    ow_conds = ("WORD", "NONWORD")
    tw_conds = ("PHRASE", "NONPHRASE", "NONWORD")

    ow_clim = dict(kind="value", lims=np.array((1.09, 2, 4)))
    percond_ow_clim = dict(kind="value", lims=np.array((1.5, 2.5, 3)))
    tw_clim = dict(kind="value", lims=np.array((1.09, 2, 4)))
    percond_tw_clim = dict(kind="value", lims=np.array((1.1, 2.5, 3)))

    brain_kwargs = dict(
        hemi="split",
        surface="pial",
        views=["lat", "med", "ven", "dor"],
        # cortex="bone",
        smoothing_steps="nearest",
        size=(1080, 680),
        subject="fsaverage",
        subjects_dir=args.fs_sub_dir,
        view_layout="horizontal",
    )

    picked_points = {"lh": [21571, 156056], "rh": [114112, 97289], "vol": []}

    title_taskpart = ("One-word with", "Two-word with")
    title_tagpart = {
        "ONEWORD": {"F1": "6 Hz stimulus", "F2": "7 Hz stimulus"},
        "TWOWORD": {
            "F1LEFT": "6 Hz stimulus on left side",
            "F1RIGHT": "7 Hz stimulus on left side",
        },
    }
    title_allcond = ": All conditions together"
    title_condpart = {
        "ONEWORD": {"WORD": "Word stimuli", "NONWORD": "Non-word stimuli"},
        "TWOWORD": {
            "PHRASE": "Valid phrases",
            "NONPHRASE": "Non-phrase pairs",
            "NONWORD": "Pair with non-word",
        },
    }

    for task in tasks:
        oneword = True if task == "ONEWORD" else False
        clim = ow_clim if oneword else tw_clim
        percond_clim = percond_ow_clim if oneword else percond_tw_clim
        tasktags = ow_tags if oneword else tw_tags

        allcond_taskpath = savepath / f"allcond/{task.lower()}"
        allcond_taskpath.mkdir(parents=True, exist_ok=True)

        percond_taskpath = savepath / f"percond/{task.lower()}/"
        percond_taskpath.mkdir(parents=True, exist_ok=True)
        for tag in tasktags:
            stc = mne.read_source_estimate(
                stc_root / f"allcond/{task.lower()}/grand_mean_snr_{tag}-lh.stc"
            )
            data = stc.data.copy()

            if oneword:
                plotfreqs = (tag_f[0],) if tag == "F1" else (tag_f[1],)
            else:
                plotfreqs = (tag_f[0], tag_f[1], tag_f[1] - tag_f[0], tag_f[1] + tag_f[0])
            for f in plotfreqs:
                curr_title = (
                    title_taskpart[int(not oneword)] + title_tagpart[task][tag] + title_allcond
                )
                stc.data = data
                brain = stc.plot(
                    initial_time=f * samprate_correction,
                    clim=clim,
                    title=curr_title,
                    **brain_kwargs,
                )
                pick_points(brain, picked_points)
                brain.toggle_interface()
                brain.save_image(allcond_taskpath / f"brain_grand_mean_snr_{tag}_{int(f):d}Hz.png")
                brain.close()
                del brain
            for cond in ow_conds if oneword else tw_conds:
                stc = mne.read_source_estimate(
                    stc_root / f"percond/{task.lower()}/grand_mean_snr_{cond}-{tag}-lh.stc"
                )
                data = stc.data.copy()
                for f in plotfreqs:
                    curr_title = (
                        title_taskpart[int(not oneword)]
                        + title_tagpart[task][tag]
                        + title_condpart[task][cond]
                    )
                    stc.data = data
                    brain = stc.plot(
                        initial_time=f * samprate_correction,
                        clim=percond_clim,
                        title=curr_title,
                        **brain_kwargs,
                    )
                    pick_points(brain, picked_points)
                    brain.toggle_interface()
                    brain.save_image(
                        percond_taskpath / f"brain_grand_mean_snr_{cond}-{tag}_{int(f):d}Hz.png"
                    )
                    brain.close()
                    del brain
